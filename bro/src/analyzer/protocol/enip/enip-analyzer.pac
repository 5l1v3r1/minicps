# Generated by binpac_quickstart

%header{
	#define SIZE 8

	RecordVal* HeaderToBro(ENIP_Header *header);
	%}

%code{
	RecordVal* HeaderToBro(ENIP_Header *header)
		{
		RecordVal* enip_header = new RecordVal(BifType::Record::EnipHeaders);
		enip_header->Assign(0, new Val(header->cmd(), TYPE_COUNT));
		enip_header->Assign(1, new Val(header->len(), TYPE_COUNT));
		enip_header->Assign(2, new Val(header->sh(), TYPE_COUNT));
		enip_header->Assign(3, new Val(header->st(), TYPE_COUNT));
		enip_header->Assign(4, bytestring_to_val(header->sc()));
		enip_header->Assign(5, new Val(header->opt(), TYPE_COUNT));
		return enip_header;
		}
	%}

refine typeattr ENIP_PDU += &let {
	proc: bool = $context.flow.proc_enip_message(this);
};

refine connection ENIP_Conn += {
	%member{
		// Fields used to determine if the protocol has been confirmed or not.
		bool confirmed;
		bool orig_pdu;
		bool resp_pdu;
		%}

	%init{
		confirmed = false;
		orig_pdu = false;
		resp_pdu = false;
		%}

	function SetPDU(is_orig: bool): bool
		%{
		if ( is_orig )
			orig_pdu = true;
		else
			resp_pdu = true;

		return true;
		%}

	function SetConfirmed(): bool
		%{
		confirmed = true;
		return true;
		%}

	function IsConfirmed(): bool
		%{
		return confirmed && orig_pdu && resp_pdu;
		%}
};

refine flow ENIP_Flow += {
	function proc_enip_message(msg: ENIP_PDU): bool
		%{
		BifEvent::generate_enip_event(connection()->bro_analyzer(), connection()->bro_analyzer()->Conn());
		return true;
		%}

		function deliver_message(header: ENIP_Header): bool
		%{
		if ( ::enip_message )
			{
			BifEvent::generate_enip_message(connection()->bro_analyzer(),
			                                  connection()->bro_analyzer()->Conn(),
			                                  HeaderToBro(header),
			                                  is_orig());
			}

		return true;
		%}

	function deliver_ENIP_PDU(message: ENIP_PDU): bool
		%{
		// We will assume that if an entire PDU from both sides
		// is successfully parsed then this is definitely enip.
		connection()->SetPDU(${message.is_orig});

		if ( !connection()->IsConfirmed() )
			{
			connection()->SetConfirmed();
			connection()->bro_analyzer()->ProtocolConfirmation();
			}

		return true;
		%}

	function deliver_unused(header: ENIP_Header, message: unused_data): bool
		%{
		if ( ::enip_unused )
		       {
		       if(${header.cmd} == LIST_IDENTITY)
		       		return false;
		       }
		return true;
		%}
};
